name: OTX
description: AlienVault OTX
base_url: https://otx.alienvault.com/
required_parameters: [API_KEY]
request_defaults:
  headers:
    X-OTX-API-KEY: API_KEY
macros:
  api_path: /api/v1/indicators
queries:
  ipv4:
    path: "{api_path}/IPv4/{observable}/general"
  ipv6:
    path: "{api_path}/IPv6/{observable}/general"
  ipv4-passivedns:
    path: "{api_path}/IPv4/{observable}/passive_dns"
  ipv6-passivedns:
    path: "{api_path}/IPv6/{observable}/passive_dns"
  ipv4-geo:
    path: "{api_path}/IPv4/{observable}/geo"
  ipv6-geo:
    path: "{api_path}/IPv6/{observable}/geo"
  dns:
    path: "{api_path}/domain/{observable}/general"
  dns-passivedns:
    path: "{api_path}/domain/{observable}/passive_dns"
  dns-geo:
    path: "{api_path}/domain/{observable}/geo"
  hostname:
    path: "{api_path}/hostname/{observable}/general"
  file_hash:
    path: "{api_path}/file/{observable}/general"
    aliases: [md5_hash, sha1_hash, sha256_hash]
  url:
    path: "{api_path}/url/{observable}/general"

result_processing: # Rules used to parse response
  severity: # Determine severity from response
    key: pulse_info.pulses # default key for conditions to use
    conditions: # evaluate conditions (in order)
      high: len gt 1 # simple condition
      warning:
        and: # support ands and ors
          - len gt 1
          - len gt 3
      information: None # [OPT] default if no previous matches (optional)
  summary: # [OPT] define which items from response to pull out
    key: pulse_info.pulses # default key to use if not specified in subkey
    fields: # fields to create in summary dictionary
      pulse_count:
        action: count # count of contents
      sections_available:
        key: pulse_info.sections_available
        action: value # [OPT] add value at key (also default if no action specified)

      names:
        action: # get the list of values of the 'name' key
          get_item: name # e.g. [data[name] for data in key]
      tags:
        key: pulse_info.pulses
        action:
          get_item: tags # get the list of values of the 'tags' key
        flatten: True # if the result is nested list, flatten

      references:
        key: pulse_info.pulses
        action:
          get_item: references
        flatten: True
